#!/usr/bin/env python
from __future__ import absolute_import, division, print_function, unicode_literals
import os, sys
project_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
lib_dir = os.path.join(project_dir, "lib")
sys.path.insert(0, lib_dir)

from config import App
import argparse
import git, node, meteor

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("user", type=str)
arg_parser.add_argument("--skip-update", action="store_true", required=False,
                        help="don't fetch latest version from the source Git repository.")
args = arg_parser.parse_args()

app_user = args.user.strip()
skip_update = args.skip_update

app = App(app_user)

if not skip_update:
    git.update(app)

available_deployers = [meteor, node]
deployers = [deployer for deployer in available_deployers if deployer.detect(app)]

if not deployers:
    print("No suitable deployer found for app. Giving up.")
    sys.exit(0)

for deployer in deployers:
    deployer.deploy(app)
